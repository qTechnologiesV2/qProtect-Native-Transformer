package dev.mdma.qprotect.core.transformer.impl.nativex.classnodes;

import org.objectweb.asm.*;
import org.objectweb.asm.tree.ClassNode;

public class NativeUtils implements Opcodes {

    public static ClassNode getClassNode(){

        ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
        FieldVisitor fieldVisitor;
        MethodVisitor methodVisitor;

        classWriter.visit(V1_8, ACC_SUPER, "de/brownie/nativeutil/NativeUtils", null, "java/lang/Object", null);

        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, "NATIVE_FOLDER_PATH_PREFIX", "Ljava/lang/String;", null, "nativeutils");
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_STATIC, "temporaryDir", "Ljava/io/File;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(0, "<init>", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(14, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            methodVisitor.visitInsn(RETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lde/brownie/nativeutil/NativeUtils;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "loadLibraryFromJar", "(Ljava/lang/String;)V", null, new String[]{"java/io/IOException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Throwable");
            Label label3 = new Label();
            Label label4 = new Label();
            Label label5 = new Label();
            methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Throwable");
            Label label6 = new Label();
            methodVisitor.visitTryCatchBlock(label3, label4, label6, null);
            Label label7 = new Label();
            Label label8 = new Label();
            Label label9 = new Label();
            methodVisitor.visitTryCatchBlock(label7, label8, label9, "java/lang/Throwable");
            Label label10 = new Label();
            methodVisitor.visitTryCatchBlock(label5, label10, label6, null);
            Label label11 = new Label();
            Label label12 = new Label();
            Label label13 = new Label();
            methodVisitor.visitTryCatchBlock(label11, label12, label13, "java/io/IOException");
            Label label14 = new Label();
            methodVisitor.visitTryCatchBlock(label11, label12, label14, "java/lang/NullPointerException");
            Label label15 = new Label();
            Label label16 = new Label();
            Label label17 = new Label();
            methodVisitor.visitTryCatchBlock(label15, label16, label17, null);
            Label label18 = new Label();
            methodVisitor.visitTryCatchBlock(label17, label18, label17, null);
            Label label19 = new Label();
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(15, label19);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ALOAD, 0);
            Label label20 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPEQ, label20);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitLdcInsn("/");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z", false);
            Label label21 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label21);
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(16, label20);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("The path has to be absolute (start with '/').");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(18, label21);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "de/brownie/nativeutil/OSUtil", "getCurrentOS", "()Lde/brownie/nativeutil/OS;", false);
            methodVisitor.visitFieldInsn(GETSTATIC, "de/brownie/nativeutil/OS", "WINDOWS", "Lde/brownie/nativeutil/OS;");
            Label label22 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPNE, label22);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitLdcInsn(".dll");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            Label label23 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label23);
            methodVisitor.visitLabel(label22);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "de/brownie/nativeutil/OSUtil", "getCurrentOS", "()Lde/brownie/nativeutil/OS;", false);
            methodVisitor.visitFieldInsn(GETSTATIC, "de/brownie/nativeutil/OS", "UNIX", "Lde/brownie/nativeutil/OS;");
            Label label24 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPNE, label24);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitLdcInsn(".so");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitJumpInsn(GOTO, label23);
            methodVisitor.visitLabel(label24);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitLdcInsn(".dylib");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitLabel(label23);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/String"});
            methodVisitor.visitVarInsn(ASTORE, 0);
            Label label25 = new Label();
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(19, label25);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitLdcInsn("/");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label26 = new Label();
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(20, label26);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(ICONST_1);
            Label label27 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPLE, label27);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(AALOAD);
            Label label28 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label28);
            methodVisitor.visitLabel(label27);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{Opcodes.TOP, "[Ljava/lang/String;"}, 0, null);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitLabel(label28);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/String"});
            methodVisitor.visitVarInsn(ASTORE, 1);
            Label label29 = new Label();
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(21, label29);
            methodVisitor.visitVarInsn(ALOAD, 1);
            Label label30 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label30);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
            methodVisitor.visitInsn(ICONST_3);
            Label label31 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label31);
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLineNumber(22, label30);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"java/lang/String", "java/lang/String", "[Ljava/lang/String;"}, 0, new Object[]{});
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("The filename has to be at least 3 characters long.");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label31);
            methodVisitor.visitLineNumber(24, label31);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "de/brownie/nativeutil/NativeUtils", "temporaryDir", "Ljava/io/File;");
            Label label32 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label32);
            Label label33 = new Label();
            methodVisitor.visitLabel(label33);
            methodVisitor.visitLineNumber(25, label33);
            methodVisitor.visitLdcInsn("nativeutils");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "de/brownie/nativeutil/NativeUtils", "createTempDirectory", "(Ljava/lang/String;)Ljava/io/File;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "de/brownie/nativeutil/NativeUtils", "temporaryDir", "Ljava/io/File;");
            Label label34 = new Label();
            methodVisitor.visitLabel(label34);
            methodVisitor.visitLineNumber(26, label34);
            methodVisitor.visitFieldInsn(GETSTATIC, "de/brownie/nativeutil/NativeUtils", "temporaryDir", "Ljava/io/File;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "deleteOnExit", "()V", false);
            methodVisitor.visitLabel(label32);
            methodVisitor.visitLineNumber(28, label32);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/io/File");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "de/brownie/nativeutil/NativeUtils", "temporaryDir", "Ljava/io/File;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(29, label11);
            methodVisitor.visitLdcInsn(Type.getType("Lde/brownie/nativeutil/NativeUtils;"));
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", false);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label35 = new Label();
            methodVisitor.visitLabel(label35);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ASTORE, 5);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(30, label3);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "toPath", "()Ljava/nio/file/Path;", false);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitTypeInsn(ANEWARRAY, "java/nio/file/CopyOption");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitFieldInsn(GETSTATIC, "java/nio/file/StandardCopyOption", "REPLACE_EXISTING", "Ljava/nio/file/StandardCopyOption;");
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/nio/file/Files", "copy", "(Ljava/io/InputStream;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)J", false);
            methodVisitor.visitInsn(POP2);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(31, label4);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitJumpInsn(IFNULL, label12);
            methodVisitor.visitVarInsn(ALOAD, 5);
            Label label36 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label36);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitJumpInsn(GOTO, label12);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[]{"java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/io/File", "java/io/InputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 6);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            methodVisitor.visitJumpInsn(GOTO, label12);
            methodVisitor.visitLabel(label36);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            methodVisitor.visitJumpInsn(GOTO, label12);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(29, label5);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 6);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitVarInsn(ASTORE, 5);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(31, label6);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 7);
            methodVisitor.visitLabel(label10);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label37 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label37);
            methodVisitor.visitVarInsn(ALOAD, 5);
            Label label38 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label38);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitJumpInsn(GOTO, label37);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[]{"java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/io/File", "java/io/InputStream", "java/lang/Throwable", Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 8);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
            methodVisitor.visitJumpInsn(GOTO, label37);
            methodVisitor.visitLabel(label38);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            methodVisitor.visitLabel(label37);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(39, label12);
            methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[]{"java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/io/File"}, 0, new Object[]{});
            methodVisitor.visitJumpInsn(GOTO, label15);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(32, label13);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/io/IOException"});
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label39 = new Label();
            methodVisitor.visitLabel(label39);
            methodVisitor.visitLineNumber(33, label39);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
            methodVisitor.visitInsn(POP);
            Label label40 = new Label();
            methodVisitor.visitLabel(label40);
            methodVisitor.visitLineNumber(34, label40);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(36, label14);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/NullPointerException"});
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label41 = new Label();
            methodVisitor.visitLabel(label41);
            methodVisitor.visitLineNumber(37, label41);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
            methodVisitor.visitInsn(POP);
            Label label42 = new Label();
            methodVisitor.visitLabel(label42);
            methodVisitor.visitLineNumber(38, label42);
            methodVisitor.visitTypeInsn(NEW, "java/io/FileNotFoundException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("File ");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitLdcInsn(" was not found inside JAR.");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/FileNotFoundException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(41, label15);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "load", "(Ljava/lang/String;)V", false);
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(44, label16);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "de/brownie/nativeutil/NativeUtils", "isPosixCompliant", "()Z", false);
            Label label43 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label43);
            Label label44 = new Label();
            methodVisitor.visitLabel(label44);
            methodVisitor.visitLineNumber(45, label44);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
            methodVisitor.visitInsn(POP);
            Label label45 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label45);
            methodVisitor.visitLabel(label43);
            methodVisitor.visitLineNumber(47, label43);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "deleteOnExit", "()V", false);
            Label label46 = new Label();
            methodVisitor.visitLabel(label46);
            methodVisitor.visitLineNumber(49, label46);
            methodVisitor.visitJumpInsn(GOTO, label45);
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(44, label17);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 9);
            methodVisitor.visitLabel(label18);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "de/brownie/nativeutil/NativeUtils", "isPosixCompliant", "()Z", false);
            Label label47 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label47);
            Label label48 = new Label();
            methodVisitor.visitLabel(label48);
            methodVisitor.visitLineNumber(45, label48);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
            methodVisitor.visitInsn(POP);
            Label label49 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label49);
            methodVisitor.visitLabel(label47);
            methodVisitor.visitLineNumber(47, label47);
            methodVisitor.visitFrame(Opcodes.F_FULL, 10, new Object[]{"java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/io/File", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 0, new Object[]{});
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "deleteOnExit", "()V", false);
            methodVisitor.visitLabel(label49);
            methodVisitor.visitLineNumber(49, label49);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label45);
            methodVisitor.visitLineNumber(50, label45);
            methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[]{"java/lang/String", "java/lang/String", "[Ljava/lang/String;", "java/io/File"}, 0, new Object[]{});
            methodVisitor.visitInsn(RETURN);
            Label label50 = new Label();
            methodVisitor.visitLabel(label50);
            methodVisitor.visitLocalVariable("is", "Ljava/io/InputStream;", null, label35, label12, 4);
            methodVisitor.visitLocalVariable("e", "Ljava/io/IOException;", null, label39, label14, 4);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/NullPointerException;", null, label41, label15, 4);
            methodVisitor.visitLocalVariable("path", "Ljava/lang/String;", null, label19, label50, 0);
            methodVisitor.visitLocalVariable("filename", "Ljava/lang/String;", null, label29, label50, 1);
            methodVisitor.visitLocalVariable("parts", "[Ljava/lang/String;", null, label26, label50, 2);
            methodVisitor.visitLocalVariable("temp", "Ljava/io/File;", null, label11, label50, 3);
            methodVisitor.visitMaxs(6, 10);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "isPosixCompliant", "()Z", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/SecurityException");
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/nio/file/FileSystemNotFoundException");
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/nio/file/ProviderNotFoundException");
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(59, label0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/nio/file/FileSystems", "getDefault", "()Ljava/nio/file/FileSystem;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/nio/file/FileSystem", "supportedFileAttributeViews", "()Ljava/util/Set;", false);
            methodVisitor.visitLdcInsn("posix");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "contains", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(61, label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/RuntimeException"});
            methodVisitor.visitVarInsn(ASTORE, 0);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(62, label3);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(IRETURN);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/RuntimeException;", null, label3, label4, 0);
            methodVisitor.visitMaxs(2, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "createTempDirectory", "(Ljava/lang/String;)Ljava/io/File;", null, new String[]{"java/io/IOException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(67, label0);
            methodVisitor.visitLdcInsn("java.io.tmpdir");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(ASTORE, 1);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(68, label1);
            methodVisitor.visitTypeInsn(NEW, "java/io/File");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "nanoTime", "()J", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(J)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;Ljava/lang/String;)V", false);
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(69, label2);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "mkdir", "()Z", false);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label3);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(70, label4);
            methodVisitor.visitTypeInsn(NEW, "java/io/IOException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("Failed to create temp directory ");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getName", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/IOException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(72, label3);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/String", "java/io/File"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARETURN);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitMaxs(6, 3);
            methodVisitor.visitEnd();
        }
        classWriter.visitEnd();
        ClassReader classReader = new ClassReader(classWriter.toByteArray());
        ClassNode classNode = new ClassNode();
        classReader.accept(classNode, 0);
        return classNode;
    }
}
